<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kcc.banking.domain.employee.mapper.EmployeeMapper">

    <select id="findById" parameterType="java.lang.Long">
        select id, name, birth_date, phone_number , email, roles, password
        from employee
        WHERE id = #{id}
    </select>

    <select id="findAuthDataById" parameterType="java.lang.Long">

        select e.id as "id", e.name as "name", e.roles as "roles",b.id as "branch_id", b.name as "branch_name"
        from employee e
        join branch b on e.branch_id = b.id
        WHERE e.id = #{id}


    </select>


    <insert id="save" parameterType="EmployeeCreate">
        <selectKey keyProperty="id" resultType="java.lang.Long" order="BEFORE">
            SELECT employee_seq.nextval FROM dual
        </selectKey>
        INSERT INTO Employee (id, branch_id, name, phone_number, email,birth_date, password, roles, registrant_id, registration_date, version)
        VALUES (
        #{id},
        #{branchId},
        #{name},
        #{phoneNumber},
        #{email},
        #{birthDate},
        #{password},
        #{roles},
        #{registrantId},
        #{registrationDate},
        #{version}
        )
    </insert>

    <update id="update" parameterType="EmployeeUpdate">
        UPDATE Employee
        SET branch_id = #{branchId},
        name = #{name},
        phone_number = #{phoneNumber},
        email = #{email},
        birth_date = #{birthDate},
        password = #{password},
        roles = #{roles},
        modifier_id = #{modifierId},
        modification_date = #{modificationDate},
        version = version + #{version}
        WHERE id = #{id}
    </update>



    <select id="findAllOfBranch"  parameterType="java.lang.Long">
        select e.id as "id", e.name as "name", e.birth_date, e.phone_number ,e.email, roles
        from employee e
        where e.branch_id = #{branchId}
    </select>

    <select id="findAllOfBranchBySearchOption" parameterType="EmployeeSearch">
        SELECT e.id AS "id",
        e.name AS "name",
        e.birth_date,
        e.phone_number,
        e.email,
        roles
        FROM employee e
        WHERE e.branch_id = #{branchId}  -- branchId 조건을 항상 포함
        <if test="searchOption != null and !searchOption.equals('')">
            AND ${searchOption} LIKE '%' || #{searchValue} || '%'
        </if>
    </select>

</mapper>
